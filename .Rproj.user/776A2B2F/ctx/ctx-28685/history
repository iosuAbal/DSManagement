atributos_discretized <- lapply(obj@atributos, FUN = function(atributo) {
if (atributo@tipo == "numeric" || atributo@tipo == "integer") {
return(discretizeEF(atributo))  # Llamar a la implementación de discretize en AtributoDataset
}
return(atributo)
})
return(dataset(clase = obj@clase, atributos = atributos_discretized))
})
#prueba
dataset <- datasetFromCSV("C:/UPV/Master/Analisis de datos/T2/temperat.csv", sep=";")
setClass("AtributoDataset",
slots = c(nombre = "character",
tipo = "character",
valores = "ANY",
cortes = "ANY")
)
#constructor
atributoDataset <- function (name,vector,cortes=NULL) {
tipo <- if (is.numeric(vector)) {
if (all(as.integer(vector) == vector)) {
"integer"
} else {
"numeric"
}
} else if (is.factor(vector)) {
"factor"
} else {
"character"
}
object <- new("AtributoDataset", nombre=name, tipo=tipo, valores=vector, cortes=cortes)
return(object)
}
#validador
validarAtributo <- function(object) {
# Verificar que el nombre no esté vacío
if (nchar(object@nombre) == 0) {
stop("El nombre del atributo no puede estar vacío.")
}
if (nchar(object@tipo) == 0) {
stop("El tipo del atributo no puede estar vacío.")
}
if (length(object@valores) == 0) {
stop("Los valores del atributo no pueden estar vacíos.")
}
return(TRUE)
}
setValidity(Class="AtributoDataset", method=validarAtributo)
#clase dataset
setClass("Dataset",
slots = c(nombre = "character", atributos = "list")  # Lista de objetos AtributoDataset
)
#constructor
dataset <- function (nombre, atributos) {
object <- new("Dataset", nombre=nombre, atributos=atributos)
return(object)
}
dataset <- function (nombre, atributos) {
object <- new("Dataset", nombre=nombre, atributos=atributos)
return(object)
}
setGeneric(name="discretizeEW", def=function(obj, n_intervals) standardGeneric("discretizeEW"))
setGeneric(name="discretizeEF", def=function(obj, n_intervals) standardGeneric("discretizeEF"))
setMethod(f="discretizeEW", signature="AtributoDataset",
definition=function(obj, n_intervals) {
if (obj@tipo != "numeric" && obj@tipo != "integer") {
stop("El atributo no es numérico o entero, no se puede discretizar.")
}
# Aplicar tu función discretizeEW a los valores del objeto
discretized_values <- discretizeEW_base(obj@valores, n_intervals)
# Retornar un nuevo objeto AtributoDataset con los valores discretizados
return(atributoDataset(paste(obj@nombre,"- Discretized(EW)"),discretized_values$vector, discretized_values$cut.points))
})
setMethod(f="discretizeEW", signature="Dataset",
definition=function(obj,n_intervals) {
atributos_discretized <- lapply(obj@atributos, FUN = function(atributo) {
if (atributo@tipo == "numeric" || atributo@tipo == "integer") {
return(discretizeEW(atributo))  # Llamar a la implementación de discretize en AtributoDataset
}
return(atributo)
})
return(dataset(clase = obj@clase, atributos = atributos_discretized))
})
setMethod(f="discretizeEF", signature="AtributoDataset",
definition=function(obj, n_intervals) {
if (obj@tipo != "numeric" && obj@tipo != "integer") {
stop("El atributo no es numérico o entero, no se puede discretizar.")
}
discretized_values <- discretizeEF_base(obj@valores, n_intervals)
return(atributoDataset(paste(obj@nombre,"- Discretized(EF)"),discretized_values$vector, discretized_values$cut.points))
})
setMethod(f="discretizeEF", signature="Dataset",
definition=function(obj,n_intervals) {
atributos_discretized <- lapply(obj@atributos, FUN = function(atributo) {
if (atributo@tipo == "numeric" || atributo@tipo == "integer") {
return(discretizeEF(atributo))  # Llamar a la implementación de discretize en AtributoDataset
}
return(atributo)
})
return(dataset(clase = obj@clase, atributos = atributos_discretized))
})
#prueba
dataset <- datasetFromCSV("C:/UPV/Master/Analisis de datos/T2/temperat.csv", sep=";")
# Constructor para la clase Dataset
datasetFromCSV <- function(file_path, sep=",") {
# Leer el archivo CSV en un data.frame
df <- read.csv(file_path, sep=sep)
# Crear una lista de objetos AtributoDataset para cada columna del data.frame
atributos <- lapply(names(df), function(col_name) {
vector <- df[[col_name]]
# Crear un objeto AtributoDataset para cada columna
atributo <- atributoDataset(col_name, vector)
return(atributo)
})
# Crear el objeto Dataset con la lista de atributos y la clase (si se proporciona)
dataset <- new("Dataset", nombre=basename(file_path), atributos = atributos)
return(dataset)
}
#prueba
dataset <- datasetFromCSV("C:/UPV/Master/Analisis de datos/T2/temperat.csv", sep=";")
discretizeEW(dataset@atributos[[1]], 3)
discretizeEF(dataset@atributos[[1]], 3)@valores
discretizeEF(dataset@atributos[[1]], 3)
discretizeEW(dataset@atributos[[1]], 3)
discretizeEW(dataset, 3)
#prueba
dataset <- datasetFromCSV("C:/UPV/Master/Analisis de datos/T2/temperat.csv", sep=";")
discretizeEW(dataset, 3)
setMethod(f="discretizeEF", signature="Dataset",
definition=function(obj,n_intervals) {
atributos_discretized <- lapply(obj@atributos, FUN = function(atributo) {
if (atributo@tipo == "numeric" || atributo@tipo == "integer") {
return(discretizeEF(atributo,n_intevals))  # Llamar a la implementación de discretize en AtributoDataset
}
return(atributo)
})
return(dataset(clase = obj@clase, atributos = atributos_discretized))
})
setMethod(f="discretizeEW", signature="Dataset",
definition=function(obj,n_intervals) {
atributos_discretized <- lapply(obj@atributos, FUN = function(atributo) {
if (atributo@tipo == "numeric" || atributo@tipo == "integer") {
return(discretizeEW(atributo,n_intevals))  # Llamar a la implementación de discretize en AtributoDataset
}
return(atributo)
})
return(dataset(clase = obj@clase, atributos = atributos_discretized))
})
discretizeEW(dataset, 3)
setMethod(f="discretizeEF", signature="Dataset",
definition=function(obj,n_intervals) {
atributos_discretized <- lapply(obj@atributos, FUN = function(atributo,n_intervals) {
if (atributo@tipo == "numeric" || atributo@tipo == "integer") {
return(discretizeEF(atributo,n_intevals))  # Llamar a la implementación de discretize en AtributoDataset
}
return(atributo)
})
return(dataset(clase = obj@clase, atributos = atributos_discretized))
})
setMethod(f="discretizeEW", signature="Dataset",
definition=function(obj, n_intervals) {
atributos_discretized <- lapply(obj@atributos, FUN = function(atributo, n_intervals) {
if (atributo@tipo == "numeric" || atributo@tipo == "integer") {
return(discretizeEW(atributo, n_intevals))  # Llamar a la implementación de discretize en AtributoDataset
}
return(atributo)
})
return(dataset(clase = obj@clase, atributos = atributos_discretized))
})
#prueba
dataset <- datasetFromCSV("C:/UPV/Master/Analisis de datos/T2/temperat.csv", sep=";")
discretizeEW(dataset, 3)
setMethod(f="discretizeEW", signature="Dataset",
definition=function(obj, n_intervals) {
atributos_discretized <- lapply(obj@atributos, FUN = function(atributo) {
if (atributo@tipo == "numeric" || atributo@tipo == "integer") {
return(discretizeEW(atributo, n_intervals))  # Llamar a la implementación de discretize en AtributoDataset
}
return(atributo)
})
return(dataset(clase = obj@clase, atributos = atributos_discretized))
})
setMethod(f="discretizeEF", signature="Dataset",
definition=function(obj,n_intervals) {
atributos_discretized <- lapply(obj@atributos, FUN = function(atributo) {
if (atributo@tipo == "numeric" || atributo@tipo == "integer") {
return(discretizeEF(atributo,n_intervals))  # Llamar a la implementación de discretize en AtributoDataset
}
return(atributo)
})
return(dataset(clase = obj@clase, atributos = atributos_discretized))
})
#prueba
dataset <- datasetFromCSV("C:/UPV/Master/Analisis de datos/T2/temperat.csv", sep=";")
discretizeEW(dataset, 3)
#constructor
dataset <- function (nombre, atributos) {
object <- new("Dataset", nombre=nombre, atributos=atributos)
return(object)
}
validarDataset <- function(object) {
#La clase debe ser de tipo character
if (!is.character(object@nombre)) {
stop("El nombre debe ser de tipo character.")
}
# Atributos deben ser objetos de la clase AtributoDataset
if (!all(sapply(object@atributos, function(x) "AtributoDataset" %in% class(x)))) {
stop("Todos los elementos de 'atributos' deben ser de la clase 'AtributoDataset'.")
}
if(length(object@atributos)==0){
stop("El dataset debe tener una lista de atributos")
}
return(TRUE)
}
setValidity(Class="Dataset", method=validarDataset)
# Constructor para la clase Dataset
datasetFromCSV <- function(file_path, sep=",") {
# Leer el archivo CSV en un data.frame
df <- read.csv(file_path, sep=sep)
# Crear una lista de objetos AtributoDataset para cada columna del data.frame
atributos <- lapply(names(df), function(col_name) {
vector <- df[[col_name]]
# Crear un objeto AtributoDataset para cada columna
atributo <- atributoDataset(col_name, vector)
return(atributo)
})
# Crear el objeto Dataset con la lista de atributos y la clase (si se proporciona)
dataset <- new("Dataset", nombre=basename(file_path), atributos = atributos)
return(dataset)
}
setGeneric(name="discretizeEW", def=function(obj, n_intervals) standardGeneric("discretizeEW"))
setGeneric(name="discretizeEF", def=function(obj, n_intervals) standardGeneric("discretizeEF"))
setMethod(f="discretizeEW", signature="AtributoDataset",
definition=function(obj, n_intervals) {
if (obj@tipo != "numeric" && obj@tipo != "integer") {
stop("El atributo no es numérico o entero, no se puede discretizar.")
}
# Aplicar tu función discretizeEW a los valores del objeto
discretized_values <- discretizeEW_base(obj@valores, n_intervals)
# Retornar un nuevo objeto AtributoDataset con los valores discretizados
return(atributoDataset(paste(obj@nombre,"- Discretized(EW)"),discretized_values$vector, discretized_values$cut.points))
})
setMethod(f="discretizeEW", signature="Dataset",
definition=function(obj, n_intervals) {
atributos_discretized <- lapply(obj@atributos, FUN = function(atributo) {
if (atributo@tipo == "numeric" || atributo@tipo == "integer") {
return(discretizeEW(atributo, n_intervals))  # Llamar a la implementación de discretize en AtributoDataset
}
return(atributo)
})
return(dataset(clase = obj@clase, atributos = atributos_discretized))
})
setMethod(f="discretizeEF", signature="AtributoDataset",
definition=function(obj, n_intervals) {
if (obj@tipo != "numeric" && obj@tipo != "integer") {
stop("El atributo no es numérico o entero, no se puede discretizar.")
}
discretized_values <- discretizeEF_base(obj@valores, n_intervals)
return(atributoDataset(paste(obj@nombre,"- Discretized(EF)"),discretized_values$vector, discretized_values$cut.points))
})
setMethod(f="discretizeEF", signature="Dataset",
definition=function(obj,n_intervals) {
atributos_discretized <- lapply(obj@atributos, FUN = function(atributo) {
if (atributo@tipo == "numeric" || atributo@tipo == "integer") {
return(discretizeEF(atributo,n_intervals))  # Llamar a la implementación de discretize en AtributoDataset
}
return(atributo)
})
return(dataset(clase = obj@clase, atributos = atributos_discretized))
})
#prueba
dataset <- datasetFromCSV("C:/UPV/Master/Analisis de datos/T2/temperat.csv", sep=";")
discretizeEW(dataset, 3)
setMethod(f="discretizeEW", signature="Dataset",
definition=function(obj, n_intervals) {
atributos_discretized <- lapply(obj@atributos, FUN = function(atributo) {
if (atributo@tipo == "numeric" || atributo@tipo == "integer") {
return(discretizeEW(atributo, n_intervals))  # Llamar a la implementación de discretize en AtributoDataset
}
return(atributo)
})
return(dataset(nombre = obj@clase, atributos = atributos_discretized))
})
setMethod(f="discretizeEF", signature="AtributoDataset",
definition=function(obj, n_intervals) {
if (obj@tipo != "numeric" && obj@tipo != "integer") {
stop("El atributo no es numérico o entero, no se puede discretizar.")
}
discretized_values <- discretizeEF_base(obj@valores, n_intervals)
return(atributoDataset(paste(obj@nombre,"- Discretized(EF)"),discretized_values$vector, discretized_values$cut.points))
})
setMethod(f="discretizeEF", signature="Dataset",
definition=function(obj,n_intervals) {
atributos_discretized <- lapply(obj@atributos, FUN = function(atributo) {
if (atributo@tipo == "numeric" || atributo@tipo == "integer") {
return(discretizeEF(atributo,n_intervals))  # Llamar a la implementación de discretize en AtributoDataset
}
return(atributo)
})
return(dataset(nombre = obj@clase, atributos = atributos_discretized))
})
#prueba
dataset <- datasetFromCSV("C:/UPV/Master/Analisis de datos/T2/temperat.csv", sep=";")
discretizeEW(dataset, 3)
setMethod(f="discretizeEW", signature="Dataset",
definition=function(obj, n_intervals) {
atributos_discretized <- lapply(obj@atributos, FUN = function(atributo) {
if (atributo@tipo == "numeric" || atributo@tipo == "integer") {
return(discretizeEW(atributo, n_intervals))  # Llamar a la implementación de discretize en AtributoDataset
}
return(atributo)
})
return(dataset(nombre = obj@nombre, atributos = atributos_discretized))
})
#clase dataset
setClass("Dataset",
slots = c(nombre = "character",
atributos = "list")  # Lista de objetos AtributoDataset
)
#constructor
dataset <- function (nombre, atributos) {
object <- new("Dataset", nombre=nombre, atributos=atributos)
return(object)
}
validarDataset <- function(object) {
#La clase debe ser de tipo character
if (!is.character(object@nombre)) {
stop("El nombre debe ser de tipo character.")
}
# Atributos deben ser objetos de la clase AtributoDataset
if (!all(sapply(object@atributos, function(x) "AtributoDataset" %in% class(x)))) {
stop("Todos los elementos de 'atributos' deben ser de la clase 'AtributoDataset'.")
}
if(length(object@atributos)==0){
stop("El dataset debe tener una lista de atributos")
}
return(TRUE)
}
setValidity(Class="Dataset", method=validarDataset)
# Constructor para la clase Dataset
datasetFromCSV <- function(file_path, sep=",") {
# Leer el archivo CSV en un data.frame
df <- read.csv(file_path, sep=sep)
# Crear una lista de objetos AtributoDataset para cada columna del data.frame
atributos <- lapply(names(df), function(col_name) {
vector <- df[[col_name]]
# Crear un objeto AtributoDataset para cada columna
atributo <- atributoDataset(col_name, vector)
return(atributo)
})
# Crear el objeto Dataset con la lista de atributos y la clase (si se proporciona)
dataset <- new("Dataset", nombre=basename(file_path), atributos = atributos)
return(dataset)
}
setGeneric(name="discretizeEW", def=function(obj, n_intervals) standardGeneric("discretizeEW"))
setGeneric(name="discretizeEF", def=function(obj, n_intervals) standardGeneric("discretizeEF"))
setMethod(f="discretizeEW", signature="AtributoDataset",
definition=function(obj, n_intervals) {
if (obj@tipo != "numeric" && obj@tipo != "integer") {
stop("El atributo no es numérico o entero, no se puede discretizar.")
}
# Aplicar tu función discretizeEW a los valores del objeto
discretized_values <- discretizeEW_base(obj@valores, n_intervals)
# Retornar un nuevo objeto AtributoDataset con los valores discretizados
return(atributoDataset(paste(obj@nombre,"- Discretized(EW)"),discretized_values$vector, discretized_values$cut.points))
})
setMethod(f="discretizeEW", signature="Dataset",
definition=function(obj, n_intervals) {
atributos_discretized <- lapply(obj@atributos, FUN = function(atributo) {
if (atributo@tipo == "numeric" || atributo@tipo == "integer") {
return(discretizeEW(atributo, n_intervals))  # Llamar a la implementación de discretize en AtributoDataset
}
return(atributo)
})
return(dataset(nombre = obj@nombre, atributos = atributos_discretized))
})
setMethod(f="discretizeEF", signature="AtributoDataset",
definition=function(obj, n_intervals) {
if (obj@tipo != "numeric" && obj@tipo != "integer") {
stop("El atributo no es numérico o entero, no se puede discretizar.")
}
discretized_values <- discretizeEF_base(obj@valores, n_intervals)
return(atributoDataset(paste(obj@nombre,"- Discretized(EF)"),discretized_values$vector, discretized_values$cut.points))
})
setMethod(f="discretizeEF", signature="Dataset",
definition=function(obj,n_intervals) {
atributos_discretized <- lapply(obj@atributos, FUN = function(atributo) {
if (atributo@tipo == "numeric" || atributo@tipo == "integer") {
return(discretizeEF(atributo,n_intervals))  # Llamar a la implementación de discretize en AtributoDataset
}
return(atributo)
})
return(dataset(nombre = obj@nombre, atributos = atributos_discretized))
})
#prueba
dataset <- datasetFromCSV("C:/UPV/Master/Analisis de datos/T2/temperat.csv", sep=";")
discretizeEW(dataset, 3)
#constructor
dataset <- function (nombre, atributos) {
object <- new("Dataset", nombre=nombre, atributos=atributos)
return(object)
}
validarDataset <- function(object) {
#La clase debe ser de tipo character
if (!is.character(object@nombre)) {
stop("El nombre debe ser de tipo character.")
}
# Atributos deben ser objetos de la clase AtributoDataset
if (!all(sapply(object@atributos, function(x) "AtributoDataset" %in% class(x)))) {
stop("Todos los elementos de 'atributos' deben ser de la clase 'AtributoDataset'.")
}
if(length(object@atributos)==0){
stop("El dataset debe tener una lista de atributos")
}
return(TRUE)
}
setValidity(Class="Dataset", method=validarDataset)
# Constructor para la clase Dataset
datasetFromCSV <- function(file_path, sep=",") {
# Leer el archivo CSV en un data.frame
df <- read.csv(file_path, sep=sep)
# Crear una lista de objetos AtributoDataset para cada columna del data.frame
atributos <- lapply(names(df), function(col_name) {
vector <- df[[col_name]]
# Crear un objeto AtributoDataset para cada columna
atributo <- atributoDataset(col_name, vector)
return(atributo)
})
# Crear el objeto Dataset con la lista de atributos y la clase (si se proporciona)
dataset <- new("Dataset", nombre=basename(file_path), atributos = atributos)
return(dataset)
}
setGeneric(name="discretizeEW", def=function(obj, n_intervals) standardGeneric("discretizeEW"))
setGeneric(name="discretizeEF", def=function(obj, n_intervals) standardGeneric("discretizeEF"))
setMethod(f="discretizeEW", signature="AtributoDataset",
definition=function(obj, n_intervals) {
if (obj@tipo != "numeric" && obj@tipo != "integer") {
stop("El atributo no es numérico o entero, no se puede discretizar.")
}
# Aplicar tu función discretizeEW a los valores del objeto
discretized_values <- discretizeEW_base(obj@valores, n_intervals)
# Retornar un nuevo objeto AtributoDataset con los valores discretizados
return(atributoDataset(paste(obj@nombre,"- Discretized(EW)"),discretized_values$vector, discretized_values$cut.points))
})
setMethod(f="discretizeEW", signature="Dataset",
definition=function(obj, n_intervals) {
atributos_discretized <- lapply(obj@atributos, FUN = function(atributo) {
if (atributo@tipo == "numeric" || atributo@tipo == "integer") {
return(discretizeEW(atributo, n_intervals))  # Llamar a la implementación de discretize en AtributoDataset
}
return(atributo)
})
return(dataset(nombre = obj@nombre, atributos = atributos_discretized))
})
setMethod(f="discretizeEF", signature="AtributoDataset",
definition=function(obj, n_intervals) {
if (obj@tipo != "numeric" && obj@tipo != "integer") {
stop("El atributo no es numérico o entero, no se puede discretizar.")
}
discretized_values <- discretizeEF_base(obj@valores, n_intervals)
return(atributoDataset(paste(obj@nombre,"- Discretized(EF)"),discretized_values$vector, discretized_values$cut.points))
})
setMethod(f="discretizeEF", signature="Dataset",
definition=function(obj,n_intervals) {
atributos_discretized <- lapply(obj@atributos, FUN = function(atributo) {
if (atributo@tipo == "numeric" || atributo@tipo == "integer") {
return(discretizeEF(atributo,n_intervals))  # Llamar a la implementación de discretize en AtributoDataset
}
return(atributo)
})
return(dataset(nombre = obj@nombre, atributos = atributos_discretized))
})
#prueba
dataset <- datasetFromCSV("C:/UPV/Master/Analisis de datos/T2/temperat.csv", sep=";")
discretizeEW(dataset, 3)
#prueba
ds <- datasetFromCSV("C:/UPV/Master/Analisis de datos/T2/temperat.csv", sep=";")
discretizeEW(ds, 3)
#constructor
createDataset <- function (nombre, atributos) {
object <- new("Dataset", nombre=nombre, atributos=atributos)
return(object)
}
setMethod(f="discretizeEF", signature="Dataset",
definition=function(obj,n_intervals) {
atributos_discretized <- lapply(obj@atributos, FUN = function(atributo) {
if (atributo@tipo == "numeric" || atributo@tipo == "integer") {
return(discretizeEF(atributo,n_intervals))  # Llamar a la implementación de discretize en AtributoDataset
}
return(atributo)
})
return(createDataset(nombre = obj@nombre, atributos = atributos_discretized))
})
setMethod(f="discretizeEW", signature="Dataset",
definition=function(obj, n_intervals) {
atributos_discretized <- lapply(obj@atributos, FUN = function(atributo) {
if (atributo@tipo == "numeric" || atributo@tipo == "integer") {
return(discretizeEW(atributo, n_intervals))  # Llamar a la implementación de discretize en AtributoDataset
}
return(atributo)
})
return(createDataset(nombre = obj@nombre, atributos = atributos_discretized))
})
#prueba
ds <- datasetFromCSV("C:/UPV/Master/Analisis de datos/T2/temperat.csv", sep=";")
discretizeEW(ds, 3)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
```{r eval=TRUE}
build_vignettes()
devtools::build_vignettes()
